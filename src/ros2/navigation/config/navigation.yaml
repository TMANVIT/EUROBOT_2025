amcl:
  ros__parameters:
    use_sim_time: false
    tf_broadcast: false

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    # default_bt_xml_filename: "config/bt/behavior_tree.xml" ## Хз, какая-то херня
    bt_loop_duration: 50
    default_server_timeout: 50
    enable_groot_monitoring: false
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: false



#Нравится гораздо больше, потому что явно учитывает costmap и дает гибко настроить критиков, отвечающих за неё

controller_server:
  ros__parameters:
    controller_frequency: 30.0
    use_sim_time: false
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.1
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 15.0

    # Goal checker parameters
    general_goal_checker:
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.02
      yaw_goal_tolerance: 0.03
      
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.1
      vy_std: 0.0
      wz_std: 0.4
      vx_max: 0.15
      vx_min: -0.1
      vy_max: 0.0
      wz_max: 1.5
      ax_max: 0.1
      ax_min: -0.1
      ay_min: 0.0
      ay_max: 0.0
      az_max: 0.5
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 1.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: false
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      inversion_yaw_tolerance: 0.07
      inversion_xy_tolerance: 0.04
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 0.0
      critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 6.0
        threshold_to_consider: 0.1
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 0.1
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 0.2
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 7.81
        critical_cost: 300.0
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 0.2
        trajectory_point_step: 2
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.2
        offset_from_furthest: 20
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 7.0
        offset_from_furthest: 5
        threshold_to_consider: 0.2
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.2
        max_angle_to_furthest: 1.0
        mode: 0
      VelocityDeadbandCritic:
        enabled: true
        cost_power: 1
        cost_weight: 35.0
        deadband_velocities: [0.05, 0.05, 0.05]

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: false

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: false
      footprint_padding: 0.03
      update_frequency: 30.0
      publish_frequency: 30.0
      global_frame: map
      robot_base_frame: base_footprint
      footprint: "[[0.23, 0.2], [0.0, 0.2], [-0.085, 0.15], [-0.085, -0.15], [0.0, -0.2], [0.23, -0.2]]"
      resolution: 0.05
      plugins: ["static_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.1
        use_maximum: false 
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.3
        cost_scaling_factor: 10.5
        inflate_unknown: false
        inflate_around_unknown: false
      always_send_full_costmap: true

local_costmap:
  ros__parameters:
    use_sim_time: false
    update_frequency: 30.0
    publish_frequency: 30.0
    global_frame: odom
    robot_base_frame: base_footprint
    rolling_window: true
    width: 0.5
    height: 0.5
    resolution: 0.05
    footprint: "[[0.23, 0.2], [0.0, 0.2], [-0.085, 0.15], [-0.085, -0.15], [0.0, -0.2], [0.23, -0.2]]"
    plugins: ["inflation_layer","static_layer"]
    static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.1
        use_maximum: false 
    inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.3
        cost_scaling_factor: 6.5
        inflate_unknown: false
        inflate_around_unknown: false           


#Нравится больше, потому что в процессе выполнения перестраивает маршрут, позволяет избегать протвников

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: false
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_theta_star_planner/ThetaStarPlanner" # In Iron and older versions, "/" was used instead of "::"
      how_many_corners: 8
      w_euc_cost: 1.0
      w_traversal_cost: 2.0
      w_heuristic_cost: 1.0

# planner_server:
#   ros__parameters:
#     planner_plugins: ["GridBased"]
#     use_sim_time: false

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlannerHybrid" # In Iron and older versions, "/" was used instead of "::"
#       downsample_costmap: false           # whether or not to downsample the map
#       downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       tolerance: 0.05                     # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
#       allow_unknown: false                 # allow traveling in unknown space
#       max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
#       max_planning_time: 5.0              # max time in s for planner to plan, smooth
#       motion_model_for_search: "DUBIN"    # Hybrid-A* Dubin, Redds-Shepp
#       angle_quantization_bins: 72         # Number of angle bins for search
#       analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
#       analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting
#       analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
#       analytic_expansion_max_cost_override: false  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
#       minimum_turning_radius: 0.40        # minimum turning radius in m of path / vehicle
#       reverse_penalty: 2.0                # Penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
#       non_straight_penalty: 1.2           # Penalty to apply if motion is non-straight, must be => 1
#       cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
#       retrospective_penalty: 0.015
#       lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
#       cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
#       debug_visualizations: false         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
#       use_quadratic_cost_penalty: false
#       downsample_obstacle_heuristic: true
#       allow_primitive_interpolation: false
#       smooth_path: false                   # If true, does a simple and quick smoothing post-processing to the path

#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10
#         do_refinement: true
#         refinement_num: 2

smoother_server:
  ros__parameters:
    costmap_topic: global_costmap/costmap_raw
    footprint_topic: global_costmap/published_footprint
    robot_base_frame: base_link
    transform_timeout: 0.1
    smoother_plugins: ["savitzky_golay_smoother"]
    savitzky_golay_smoother:
      plugin: "nav2_smoother::SavitzkyGolaySmoother"
      do_refinement: True
      refinement_num: 2


### Нужно сделать

# behavior_server:
#   ros__parameters:
#     costmap_topic: global_costmap/costmap_raw
#     footprint_topic: global_costmap/published_footprint
#     cycle_frequency: 30.0
#     behavior_plugins: ["spin", "backup", "wait"]
#     spin:
#       plugin: "nav2_behaviors/Spin" # In Iron and older versions, "/" was used instead of "::"
#       spin_dist: 0.57
#       cmd_vel: 0.5
#       time_allowance: 5.0
#     backup:
#       plugin: "nav2_behaviors/BackUp" # In Iron and older versions, "/" was used instead of "::"
#       distance: 0.2
#       speed: 0.1
#       time_allowance: 5.0
#     wait:
#       plugin: "nav2_behaviors/Wait" # In Iron and older versions, "/" was used instead of "::"
#       wait_duration: 0.5
#     local_frame: odom
#     global_frame: map
#     robot_base_frame: base_footprint
#     transform_timeout: 0.1
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 1.0
#     min_rotational_vel: 0.4
#     rotational_acc_lim: 3.2
#     enable_stamped_cmd_vel: true  # default false in Jazzy or older
