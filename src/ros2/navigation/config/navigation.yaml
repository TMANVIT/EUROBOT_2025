amcl:
  ros__parameters:
    use_sim_time: false
    tf_broadcast: false

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    default_nav_through_poses_bt_xml: /ros2_ws/src/navigation/config/bt/bt_throught_poses.xml
    default_nav_to_pose_bt_xml: /ros2_ws/src/navigation/config/bt/bt_to_pose.xml
    bt_loop_duration: 50
    default_server_timeout: 50
    enable_groot_monitoring: false
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

# bt_navigator_rclcpp_node:
#   ros__parameters:
#     use_sim_time: false



#Нравится гораздо больше, потому что явно учитывает costmap и дает гибко настроить критиков, отвечающих за неё

controller_server:
  ros__parameters:
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["goal_checker"]
    controller_frequency: 20.0
    use_sim_time: false
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.1
    failure_tolerance: 0.3
    publish_zero_velocity: false
    controller_plugins: ["FollowPath"]

    # # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 15.0

    # Goal checker parameters
    general_goal_checker:
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.01
      yaw_goal_tolerance: 0.02
      
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 6000
      vx_std: 0.17
      vy_std: 0.0
      wz_std: 0.4
      vx_max: 0.25
      vx_min: -0.1
      vy_max: 0.0
      wz_max: 0.65
      ax_max: 0.05
      ax_min: -0.05
      ay_min: 0.0
      ay_max: 0.0
      az_max: 0.1
      iteration_count: 1
      prune_distance: 1.7
      transform_tolerance: 1.1
      temperature: 0.3
      gamma: 0.015
      motion_model: "DiffDrive"
      visualize: false
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: false
      inversion_yaw_tolerance: 0.07
      inversion_xy_tolerance: 0.04
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 0.0
      critics: ["ConstraintCritic", "CostCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"]
      ConstraintCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
      GoalCritic:
        enabled: true
        cost_power: 1
        cost_weight: 6.0
        threshold_to_consider: 0.1
      GoalAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 10.0
        threshold_to_consider: 0.3
      PreferForwardCritic:
        enabled: true
        cost_power: 1
        cost_weight: 4.0
        threshold_to_consider: 0.4
      CostCritic:
        enabled: true
        cost_power: 1
        cost_weight: 7.81
        critical_cost: 300.0
        consider_footprint: true
        collision_cost: 1000000.0
        near_goal_distance: 0.05
        trajectory_point_step: 2
      PathAlignCritic:
        enabled: true
        cost_power: 1
        cost_weight: 5.0
        max_path_occupancy_ratio: 0.05
        trajectory_point_step: 4
        threshold_to_consider: 0.2
        offset_from_furthest: 20
        use_path_orientations: false
      PathFollowCritic:
        enabled: true
        cost_power: 1
        cost_weight: 7.0
        offset_from_furthest: 5
        threshold_to_consider: 0.2
      PathAngleCritic:
        enabled: true
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 0.2
        max_angle_to_furthest: 1.0
        mode: 0
      VelocityDeadbandCritic:
        enabled: true
        cost_power: 1
        cost_weight: 35.0
        deadband_velocities: [0.05, 0.05, 0.05]

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: false

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: false
      footprint_padding: 0.03
      update_frequency: 30.0
      publish_frequency: 30.0
      global_frame: map
      robot_base_frame: base_footprint
      footprint: "[[0.23, 0.2], [0.0, 0.2], [-0.085, 0.15], [-0.085, -0.15], [0.0, -0.2], [0.23, -0.2]]"
      resolution: 0.05
      plugins: ["static_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.1
        use_maximum: false 
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.35
        cost_scaling_factor: 2.5
        inflate_unknown: false
        inflate_around_unknown: false
      always_send_full_costmap: true

local_costmap:
  ros__parameters:
    use_sim_time: false
    update_frequency: 30.0
    publish_frequency: 30.0
    global_frame: odom
    robot_base_frame: base_footprint
    rolling_window: true
    width: 0.5
    height: 0.5
    resolution: 0.05
    footprint: "[[0.23, 0.2], [0.0, 0.2], [-0.085, 0.15], [-0.085, -0.15], [0.0, -0.2], [0.23, -0.2]]"
    plugins: ["inflation_layer","static_layer"]
    static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: true
        subscribe_to_updates: true
        transform_tolerance: 0.1
        use_maximum: false 
    inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.35
        cost_scaling_factor: 2.5
        inflate_unknown: false
        inflate_around_unknown: false           


#Нравится больше, потому что в процессе выполнения перестраивает маршрут, позволяет избегать протвников

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: false
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_theta_star_planner/ThetaStarPlanner" # In Iron and older versions, "/" was used instead of "::"
      how_many_corners: 8
      w_euc_cost: 1.0
      w_traversal_cost: 2.0
      w_heuristic_cost: 1.0

# planner_server:
#   ros__parameters:
#     planner_plugins: ["GridBased"]
#     use_sim_time: True

#     GridBased:
#       plugin: "nav2_smac_planner/SmacPlanner2D" # In Iron and older versions, "/" was used instead of "::"
#       tolerance: 0.03                      # tolerance for planning if unable to reach exact pose, in meters
#       downsample_costmap: false             # whether or not to downsample the map
#       downsampling_factor: 1                # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       allow_unknown: true                   # allow traveling in unknown space
#       max_iterations: 1000000               # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
#       max_on_approach_iterations: 1000      # maximum number of iterations to attempt to reach goal once in tolerance
#       max_planning_time: 2.0                # max time in s for planner to plan, smooth
#       cost_travel_multiplier: 2.0           # Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
#       use_final_approach_orientation: true # Whether to set the final path pose at the goal's orientation to the requested orientation (false) or in line with the approach angle so the robot doesn't rotate to heading (true)
#       smoother:
#         max_iterations: 1000
#         w_smooth: 0.3
#         w_data: 0.2
#         tolerance: 1.0e-10


smoother_server:
  ros__parameters:
    costmap_topic: global_costmap/costmap_raw
    footprint_topic: global_costmap/published_footprint
    robot_base_frame: base_link
    transform_timeout: 0.1
    smoother_plugins: ["savitzky_golay_smoother"]
    savitzky_golay_smoother:
      plugin: "nav2_smoother::SavitzkyGolaySmoother"
      do_refinement: True
      refinement_num: 2

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: false
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.5]
    min_velocity: [-0.5, 0.0, -2.5]
    deadband_velocity: [0.01, 0.0, 0.01]
    velocity_timeout: 1.0
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    use_realtime_priority: false
    enable_stamped_cmd_vel: false

### Нужно сделать

# behavior_server:
#   ros__parameters:
#     costmap_topic: global_costmap/costmap_raw
#     footprint_topic: global_costmap/published_footprint
#     cycle_frequency: 30.0
#     behavior_plugins: ["backup", "wait"]
#     backup:
#       plugin: "nav2_behaviors/BackUp" # In Iron and older versions, "/" was used instead of "::"
#       distance: 0.2
#       speed: 0.1
#       time_allowance: 5.0
#       disable_collision_checks: true
#     wait:
#       plugin: "nav2_behaviors/Wait" # In Iron and older versions, "/" was used instead of "::"
#       wait_duration: 0.5
#     local_frame: odom
#     global_frame: map
#     robot_base_frame: base_footprint
#     transform_timeout: 0.1
#     simulate_ahead_time: 2.0
#     max_rotational_vel: 1.0
#     min_rotational_vel: 0.4
#     rotational_acc_lim: 3.2
#     enable_stamped_cmd_vel: true  # default false in Jazzy or older
